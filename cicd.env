# ######################################################################
# cicd.env
# ######################################################################
MYAPP_NAME=DEMO
MYAPP_GIT="https://github.com/raogaru/myapp.git"
PIPE_ENV=/tmp/pipe${MYAPP_NAME}.env
AGILE_TEAMS="mars venus pluto"
BUILD_TYPES="db docker ec2" 
DEPLOY_TYPES="db kubernetes tomcat" 
TEST_TYPES="phase1 phase2 phase3"
DOCKER_LIST="tomcat postgres vault"
#
REL_MAJOR_NUM=1
REL_MINOR_NUM=2
#
MYAPP_TMP=/tmp
v_debug=1
v_random_pass_score=0
v_random_max_sleep_seconds=3
vPROCEED=YES
cPASS=PASS
cFAIL=FAIL
cNOTA=N/A

# ansi colors
cBlack="\033[30m"
cRed="\033[31m"
cGreen="\033[32m"
cYellow="\033[33m"
cBlue="\033[34m"
cPurple="\033[35m"
cCyan="\033[36m"
cReset="\033[0m"
cBold="\033[1m"
cUnderlined="\033[4m"
cBlink="\033[5m"
cReversed="\033[7m"

vLINE1="########################################################################################################################"
vLINE2="------------------------------------------------------------------------------------------------------------------------"
# ------------------------------------------------------------
PrintLine1 () {
echo ${vLINE1}
}
# ------------------------------------------------------------
PrintLine2 () {
echo ${vLINE2}
}
# ------------------------------------------------------------
DEBUG () {
[[ ${v_debug} -gt 0 ]] && echo "$*"
}
# ------------------------------------------------------------
ECHO () {
echo "$*"
}
# ------------------------------------------------------------
ECHODO () {
echo "$*"
"$*"
}
# ------------------------------------------------------------
WARN () {
echo "${cReversed}${cCyan}WARNING:${*}${cReset}"
}
# ------------------------------------------------------------
ERROR () {
echo "${cReversed}${cRed}${vLINE1}${cReset}"
echo "${cReversed}${cBlink}${cRed}ERROR:${*}${cReset}"
echo "${cReversed}${cRed}${vLINE1}${cReset}"
exit 1
}
# ------------------------------------------------------------
HEADER1 () {
echo "${cBold}${cRed}${vLINE1}${cReset}"
echo "${cBold}${cRed}${*}${cReset}"
}
# ------------------------------------------------------------
FOOTER1 () {
echo "${cBold}${cRed}${*}${cReset}"
echo "${cBold}${cRed}${vLINE1}${cReset}"
}
# ------------------------------------------------------------
HEADER2 () {
echo "${cBlue}${vLINE2}${cReset}"
echo "${cBold}${cBlue}${*}${cReset}"
}
# ------------------------------------------------------------
FOOTER2 () {
echo "${cBold}${cBlue}${*}${cReset}"
echo "${cBold}${cBlue}${vLINE2}${cReset}"
}
# ------------------------------------------------------------
HEADER3 () {
echo "${cBold}${cBlack}${*}${cReset}"
}
# ------------------------------------------------------------
FileMarker () {
echo "${cPurple}${*}${cReset}"
}
# ------------------------------------------------------------
ECHOred () {
echo "${cRed}${*}${cReset}"
}
# ------------------------------------------------------------
ECHOgreen () {
echo "${cGreen}${*}${cReset}"
}
# ------------------------------------------------------------
ECHOyellow () {
echo "${cYellow}${*}${cReset}"
}
# ------------------------------------------------------------
ECHOblue () {
echo "${cBlue}${*}${cReset}"
}
# ------------------------------------------------------------
ECHOpurple () {
echo "${cPurple}${*}${cReset}"
}
# ------------------------------------------------------------
ECHOcyan () {
echo "${cCyan}${*}${cReset}"
}
# ------------------------------------------------------------
ADDENV () {
#echo "#" >>${PIPE_ENV}
#echo "#$(date)" >>${PIPE_ENV}
echo "$*" >>${PIPE_ENV}
echo "$* added to ${PIPE_ENV}"
}
# ------------------------------------------------------------
READENV () {
echo $(grep "^${1}=" ${PIPE_ENV}|cut -f2 -d"=")
}
# ------------------------------------------------------------
DUMMY_ACTION () {
s=$((1 + $RANDOM % ${v_random_max_sleep_seconds}))
ECHOcyan "Sleeping randomly ... ${s} seconds"
sleep ${s}

r=$((1 + $RANDOM % 100))
ECHOcyan "Random result ... ${r}"

if [ ${r} -gt ${v_random_pass_score} ]; then
        ECHOcyan "Random result is SUCCESS"
        return 0
else    
        ECHOcyan "Random result is FAILED"
	ECHOred "Random failure from DUMMY_ACTION"
	return 1
fi
}
# ------------------------------------------------------------

